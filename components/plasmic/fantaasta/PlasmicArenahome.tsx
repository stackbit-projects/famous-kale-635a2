// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xdSnfxWCziyzb8tBiGitqa
// Component: ZPtvWtdss9
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeroSectionArena from "../../HeroSectionArena"; // plasmic-import: Uev3p9VZayM/component
import Navigation from "../../Navigation"; // plasmic-import: 3pqoTJs_Sosu/component
import Button from "../../Button"; // plasmic-import: ILa2cLxyoTg0/component
import LoginFrom from "../../LoginFrom"; // plasmic-import: p3a1HfRCrQ1/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_fantaasta.module.css"; // plasmic-import: xdSnfxWCziyzb8tBiGitqa/projectcss
import * as sty from "./PlasmicArenahome.module.css"; // plasmic-import: ZPtvWtdss9/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: Gng1eaWxMrAo/icon

export type PlasmicArenahome__VariantMembers = {};

export type PlasmicArenahome__VariantsArgs = {};
type VariantPropType = keyof PlasmicArenahome__VariantsArgs;
export const PlasmicArenahome__VariantProps = new Array<VariantPropType>();

export type PlasmicArenahome__ArgsType = {};
type ArgPropType = keyof PlasmicArenahome__ArgsType;
export const PlasmicArenahome__ArgProps = new Array<ArgPropType>();

export type PlasmicArenahome__OverridesType = {
  root?: p.Flex<"div">;
  heroSectionArena?: p.Flex<typeof HeroSectionArena>;
};

export interface DefaultArenahomeProps {
  dataFetches: PlasmicArenahome__Fetches;
}

function PlasmicArenahome__RenderFunc(props: {
  variants: PlasmicArenahome__VariantsArgs;
  args: PlasmicArenahome__ArgsType;
  overrides: PlasmicArenahome__OverridesType;
  dataFetches?: PlasmicArenahome__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <HeroSectionArena
            data-plasmic-name={"heroSectionArena"}
            data-plasmic-override={overrides.heroSectionArena}
            className={classNames("__wab_instance", sty.heroSectionArena)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "heroSectionArena"],
  heroSectionArena: ["heroSectionArena"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  heroSectionArena: typeof HeroSectionArena;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArenahome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArenahome__VariantsArgs;
    args?: PlasmicArenahome__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicArenahome__Fetches;
  } & Omit<PlasmicArenahome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicArenahome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicArenahome__ArgProps,
      internalVariantPropNames: PlasmicArenahome__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicArenahome__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArenahome";
  } else {
    func.displayName = `PlasmicArenahome.${nodeName}`;
  }
  return func;
}

export const PlasmicArenahome = Object.assign(
  // Top-level PlasmicArenahome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    heroSectionArena: makeNodeComponent("heroSectionArena"),

    // Metadata about props expected for PlasmicArenahome
    internalVariantProps: PlasmicArenahome__VariantProps,
    internalArgProps: PlasmicArenahome__ArgProps
  }
);

export default PlasmicArenahome;
/* prettier-ignore-end */
